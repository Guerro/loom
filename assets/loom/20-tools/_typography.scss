// NOTE: Extracts a font-family name from a font usage
// NOTE: By default it will grab the "base" font. Specify "webfont" for the webfont version.
@function get-font-family($font-name, $font-usage: base, $font-map: $LOOM-fonts) {
  @return get-map-deep($font-map, $font-name, $font-usage);
}

// NOTE: Extracts a font size from the global sizing map.
// NOTE: By default it will grab the "small breakpoint" version of the font-size.
@function get-font-size($font-name, $font-size: small, $font-map: $LOOM-font-sizes) {
  @return get-map-deep($font-map, $font-name, $font-size, 'font-size');
}

// NOTE: Extracts a line-height from the global sizing map.
@function get-line-height($font-name, $font-size: small, $font-map: $LOOM-font-sizes) {
  @return get-map-deep($font-map, $font-name, $font-size, 'line-height');
}

// NOTE: Converts pixel values to REMs.
// NOTE: Needs a base font size to convert pixels against. By default, this is the value of "base" at the "small breakpoint"
@function convert-px-to-rem($pixel-size, $root-size: get-font-size(base, small)) {
  @return ($pixel-size / $root-size) * 1rem;
}

/// Gonverts pixel values to EMs
///
/// @parameter {number} $pixels - A font size in pixels
/// @parameter {string} $browser-content - The base font size of the page at the current breakpoint. y default, this is the value of "base" at the "small breakpoint"
///
/// @group 20-tools
/// @returns {Number} Value in EMs
@function convert-px-to-em($pixels, $browser-context: get-font-size(default, small)) {
  @return ($pixels / $browser-context) + 0em; // stylelint-disable-line length-zero-no-unit
}

// NOTE: Generates a font-size ruleset.
// NOTE: By default it will grab the "small breakpoint" version of the font-size.
@mixin font-size($size-name, $size-browser-context: small ) {
  $font-size: null;

  @if (type-of($size-name) == string) {
    $font-size: get-font-size($size-name, $size-browser-context);
  }

  @if (type-of($size-name) == number) {
    $font-size: $size-name;
  }

  $font-size-context: get-font-size(default, $size-browser-context);

  font-size: $font-size; // NOTE: size in pixels (fallback)
  font-size: convert-px-to-rem($font-size, $font-size-context); // NOTE: size in REMs  // stylelint-disable-line declaration-block-no-duplicate-properties
}

/// Output styling for a generic heading.
///
/// @group 20-tools
/// @example scss
///   .o-h1 {
///     @include generic-heading();
///   }
@mixin generic-heading(
  $margin-size: xsmall,
  $font: secondary,
  $font-weight: $LOOM-font-weight-bold
  ) {
  font-family: get-font-family($font, default);
  font-weight: $font-weight;
  @if $margin-size == 0 or $margin-size == none {
    margin: 0;
  } @else {
    margin: 0 0 get-spacing($margin-size);
  }

  text-rendering: optimizeLegibility;

  .#{$LOOM-fonts-loaded} & {
    font-family: get-font-family($font, webfont);
  }
}
